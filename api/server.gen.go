// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/gcerrato/go-service-template/api/models"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all todos
	// (GET /todos)
	GetTodos(ctx echo.Context, params GetTodosParams) error
	// Create a new todo
	// (POST /todos)
	PostTodos(ctx echo.Context) error
	// Delete a todo
	// (DELETE /todos/{id})
	DeleteTodosId(ctx echo.Context, id string) error
	// Get a todo by ID
	// (GET /todos/{id})
	GetTodosId(ctx echo.Context, id string) error
	// Update a todo
	// (PUT /todos/{id})
	PutTodosId(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetTodos converts echo context to params.
func (w *ServerInterfaceWrapper) GetTodos(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTodosParams
	// ------------- Optional query parameter "completed" -------------

	err = runtime.BindQueryParameter("form", true, false, "completed", ctx.QueryParams(), &params.Completed)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter completed: %s", err))
	}

	// ------------- Optional query parameter "priority" -------------

	err = runtime.BindQueryParameter("form", true, false, "priority", ctx.QueryParams(), &params.Priority)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter priority: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTodos(ctx, params)
	return err
}

// PostTodos converts echo context to params.
func (w *ServerInterfaceWrapper) PostTodos(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTodos(ctx)
	return err
}

// DeleteTodosId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTodosId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTodosId(ctx, id)
	return err
}

// GetTodosId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTodosId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTodosId(ctx, id)
	return err
}

// PutTodosId converts echo context to params.
func (w *ServerInterfaceWrapper) PutTodosId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutTodosId(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/todos", wrapper.GetTodos)
	router.POST(baseURL+"/todos", wrapper.PostTodos)
	router.DELETE(baseURL+"/todos/:id", wrapper.DeleteTodosId)
	router.GET(baseURL+"/todos/:id", wrapper.GetTodosId)
	router.PUT(baseURL+"/todos/:id", wrapper.PutTodosId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+yYUW/bNhDHvwrB7VGz3SZ70Vu3bIMfhgVDhj0UQcGIZ4sFRSrkMYER6LsPRzKWLdN1",
	"OiRFCuSpqkTeHXm/+985D7yxXW8NGPS8fuC+aaET8fE356yjh97ZHhwqiK8bK4H+leAbp3pU1vA6LWbx",
	"W8VX1nUCec2VwbP3vOK46SH9F9bg+FDxDrwX66OGHj9vt3p0yqz5MFTcwW1QDiSvP/Ls8HH59Xa9vfkM",
	"DZKnKytt6RRdrwHJyjSCf1vAFhzDFhhaaZnybLt8NoZ0Y60GYchH40AgyE906Km5KzKjOvAoup7dt2BG",
	"y/fCs7x3tntvUiD8RJsOL6DaNz/1dgEolAbJdl4zu9q6nBUtBvhELsvBywCMvrKVdXt2nhaukmWzwajb",
	"AExJMKhWCtxx+yEoWTLdO2Wdws2hg8v8hWm4Az29ADChI3q0vY/wSBU6XvFWrdsdhEY/qFDDscyihpMX",
	"HHr5v/nQwiPLBp5665MqSfFXO9AfK5RfI4yH5fKdMfedgFFM07HU/NPLYmqeV8neEv1CiZ7klF4ps7KH",
	"Nj9cLhna3BYq5gCdgjuosgZUTBhKAOUwuvPRX4ovgsL+FEasoQOD7MPlklf8DpxPxt/NFrMFHcj2YESv",
	"eM3P4quK9wLbCNQ8WqWnNRT06u8ckGeCaeWRji60HmMhOAUtXkpe8z8Ar6I98uBEBwjO8/rj1OzvSiOh",
	"SmvZzeaRUyLMo8BABhQtvA3gNrziRnR04hH/Kg8vFPIU7KE65a/f4+WIsy1uu76+jqXhmore99b4VL/v",
	"F4tUxgbBxPsWfa9VE69w/tmnQhzdKYQubvzRwYrX/If5OMHN8/g2j0PPSJ1wTmwSdBPYtinM6Rsq/vNX",
	"BvSlONIMWXC8NAjOCM08uDtwDGjhLFaKD10n3CaxM6JFlIs1ocMTUNdU/9YXEE1djABNXVRhG6vT99DQ",
	"qEH1Q0pWwPXS+i2vpM3g8RcrN892ITtNdtjXf3QBhgM23j2r51ImomTkIZT50DTg/SpovYkwnH8bGO6E",
	"VpLlC2ejULwyIFPmmGAG7iNbBSiHKivo/EHJIcFJAlVqp/SeMM1gNtv+sQ9lWhgdLOUpIS3P1pP+FMWN",
	"FH/Utjhi7+NYUNQvyNh5oT8SW+n4RbbOXz6vMQRjka1sMPKV8ZQSm3WqKHAnWjDlNGtZ7MP7JLHglVkz",
	"hf6QiOOd+hUjtnhxNbwYL5MOkxUJZD7WG7WPbTkBdrNhy4tyZw4FcNNvmFPYFrpyeI1ovsx0kH/nPWk6",
	"WHyb6SD/9eFNwQ9rIWXruILH1XF/ojU4zWveIvb1fK5tI3RrPdZni8WCE1V5/xTrvx7LwTNxYwNuR+KM",
	"b3I3XA//BQAA//87A5q20BUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
